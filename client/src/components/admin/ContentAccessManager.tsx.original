import React, { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Spinner } from "@/components/ui/spinner";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Separator } from "@/components/ui/separator";
import { ShieldCheck, ShieldOff, Plus, Trash2, Filter, RefreshCw, CheckCircle, LockIcon, UnlockIcon, Users, Calendar, BookOpen, BookOpenCheck } from "lucide-react";

// Types
interface ContentAccessControl {
  id: number;
  contentType: string;
  contentId: number;
  userType: string;
  isAccessible: boolean;
  dailyWordLimit?: number;
  createdAt: string;
  updatedAt: string;
}

interface Content {
  id: number;
  name?: string;
  title?: string;
  description?: string;
  type?: string;
  category?: string;
}

interface VocabularyDay {
  day: number;
  wordCount: number;
}

const contentTypeOptions = [
  { value: "quant_topic", label: "Quantitative Topic" },
  { value: "verbal_topic", label: "Verbal Topic" },
  { value: "practice_set", label: "Practice Set" },
  { value: "question", label: "Question" },
  { value: "vocabulary_day", label: "Vocabulary Day" },
  { value: "vocabulary_word", label: "Vocabulary Word" },
];

const userTypeOptions = [
  { value: "free", label: "Free User" },
  { value: "premium", label: "Premium User" },
  { value: "business", label: "Business User" },
  { value: "admin", label: "Admin" },
];

// Form schema for creating/updating access rules
const accessRuleSchema = z.object({
  contentType: z.string(),
  contentId: z.coerce.number().positive(),
  userType: z.string(),
  isAccessible: z.boolean().default(true),
  dailyWordLimit: z.coerce.number().min(0).optional(),
});

type AccessRuleFormValues = z.infer<typeof accessRuleSchema>;

// Bulk actions schema
const bulkActionSchema = z.object({
  contentType: z.string(),
  userType: z.string(),
  isAccessible: z.boolean().default(true),
  contentIds: z.array(z.number()).optional(),
  dailyWordLimit: z.coerce.number().min(0).optional(),
});

type BulkActionFormValues = z.infer<typeof bulkActionSchema>;

const ContentAccessManager = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState("rules");
  const [isCreateDialogOpen, setCreateDialogOpen] = useState(false);
  const [isBulkDialogOpen, setBulkDialogOpen] = useState(false);
  const [selectedContentType, setSelectedContentType] = useState("quant_topic");
  const [selectedUserType, setSelectedUserType] = useState("free");
  const [filteredContentList, setFilteredContentList] = useState<Content[]>([]);
  const [selectedContent, setSelectedContent] = useState<Content[]>([]);
  const [vocabularyDays, setVocabularyDays] = useState<number[]>([]);

  // Form for creating new access rules
  const form = useForm<AccessRuleFormValues>({
    resolver: zodResolver(accessRuleSchema),
    defaultValues: {
      contentType: "quant_topic",
      contentId: 0,
      userType: "free",
      isAccessible: true,
      dailyWordLimit: 10, // Default limit for free users
    },
  });

  // Form for bulk actions
  const bulkForm = useForm<BulkActionFormValues>({
    resolver: zodResolver(bulkActionSchema),
    defaultValues: {
      contentType: "quant_topic",
      userType: "free",
      isAccessible: true,
      contentIds: [],
      dailyWordLimit: 10, // Default limit for free users
    },
  });

  // Get access rules based on selected content type and user type
  const { data: accessRules, isLoading: loadingRules, refetch: refetchRules } = useQuery<ContentAccessControl[]>({
    queryKey: ["/api/admin/content-access", selectedContentType, selectedUserType],
    queryFn: async () => {
      return await apiRequest(`/api/admin/content-access?contentType=${selectedContentType}&userType=${selectedUserType}`);
    },
  });

  // Get content list based on selected content type
  const { data: contentList, isLoading: loadingContent } = useQuery<Content[]>({
    queryKey: ["/api/admin/content", selectedContentType],
    queryFn: async () => {
      return await apiRequest(`/api/admin/content?type=${selectedContentType}`);
    },
  });
  
  // Get available vocabulary days
  const { data: vocabDays } = useQuery<number[]>({
    queryKey: ["/api/words/days"],
    queryFn: async () => {
      const result: number[] = await apiRequest("/api/words/days");
      setVocabularyDays(result || []);
      return result;
    }
  });

  // Filter content based on what already has rules
  useEffect(() => {
    if (contentList && accessRules && Array.isArray(accessRules)) {
      const existingContentIds = accessRules.map(rule => rule.contentId);
      // For bulk actions, show content that doesn't have rules yet
      if (activeTab === "bulk") {
        setFilteredContentList(contentList.filter(content => !existingContentIds.includes(content.id)));
      } else {
        setFilteredContentList(contentList);
      }
    } else if (contentList) {
      // If access rules is not available or not an array, just show all content
      setFilteredContentList(contentList);
    }
  }, [contentList, accessRules, activeTab]);
  
  // Reset content ID when content type changes
  useEffect(() => {
    const contentType = form.getValues("contentType");
    if (contentType === "vocabulary_day" && vocabularyDays.length > 0) {
      // Set the content ID to the first vocabulary day if available
      form.setValue("contentId", vocabularyDays[0]);
      
      // Set default word limit based on user type
      const userType = form.getValues("userType");
      let defaultLimit = 10;
      if (userType === "premium") defaultLimit = 30;
      if (userType === "business") defaultLimit = 100;
      if (userType === "admin") defaultLimit = 0;
      form.setValue("dailyWordLimit", defaultLimit);
    } else if (contentType === "vocabulary_day" && form.getValues("contentId") === 0) {
      // If no vocabulary days loaded yet, but content type is vocabulary_day, set contentId to 1
      form.setValue("contentId", 1);
    } else if (contentType !== "vocabulary_day") {
      // For non-vocabulary content types, reset to 0 to ensure user enters a valid ID
      form.setValue("contentId", 0);
    }
  }, [form.watch("contentType"), vocabularyDays]);
  
  // Similar handling for bulk form
  useEffect(() => {
    if (selectedContentType === "vocabulary_day") {
      // Set default word limit based on selected user type for bulk form
      let defaultLimit = 10;
      if (selectedUserType === "premium") defaultLimit = 30;
      if (selectedUserType === "business") defaultLimit = 100;
      if (selectedUserType === "admin") defaultLimit = 0;
      bulkForm.setValue("dailyWordLimit", defaultLimit);
    }
  }, [selectedContentType, selectedUserType]);

  // Create access rule mutation
  const createRuleMutation = useMutation({
    mutationFn: async (data: AccessRuleFormValues) => {
      return await apiRequest("/api/admin/content-access", {
        method: "POST",
        data
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/content-access"] });
      setCreateDialogOpen(false);
      form.reset();
      toast({
        title: "Success",
        description: "Access rule created successfully",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create access rule. Please try again.",
        variant: "destructive",
      });
      console.error("Error creating access rule:", error);
    },
  });

  // Update access rule mutation
  const updateRuleMutation = useMutation({
    mutationFn: async ({ id, isAccessible }: { id: number; isAccessible: boolean }) => {
      return await apiRequest(`/api/admin/content-access/${id}`, {
        method: "PATCH",
        data: { isAccessible }
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/content-access"] });
      toast({
        title: "Success",
        description: "Access rule updated successfully",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to update access rule. Please try again.",
        variant: "destructive",
      });
      console.error("Error updating access rule:", error);
    },
  });

  // Delete access rule mutation
  const deleteRuleMutation = useMutation({
    mutationFn: async (id: number) => {
      return await apiRequest(`/api/admin/content-access/${id}`, {
        method: "DELETE",
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/content-access"] });
      toast({
        title: "Success",
        description: "Access rule deleted successfully",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to delete access rule. Please try again.",
        variant: "destructive",
      });
      console.error("Error deleting access rule:", error);
    },
  });

  // Bulk create access rules mutation
  const bulkCreateRulesMutation = useMutation({
    mutationFn: async (data: BulkActionFormValues) => {
      return await apiRequest("/api/admin/content-access/bulk", {
        method: "POST",
        data
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/content-access"] });
      setBulkDialogOpen(false);
      bulkForm.reset();
      setSelectedContent([]);
      toast({
        title: "Success",
        description: "Bulk access rules created successfully",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create bulk access rules. Please try again.",
        variant: "destructive",
      });
      console.error("Error creating bulk access rules:", error);
    },
  });

  // Handle form submission
  const onSubmit = (data: AccessRuleFormValues) => {
    createRuleMutation.mutate(data);
  };

  // Handle bulk form submission
  const onBulkSubmit = (data: BulkActionFormValues) => {
    // Add selected content IDs to form data
    const contentIds = selectedContent.map(content => content.id);
    if (contentIds.length === 0) {
      toast({
        title: "Warning",
        description: "Please select at least one content item",
        variant: "destructive",
      });
      return;
    }
    
    bulkCreateRulesMutation.mutate({
      ...data,
      contentIds
    });
  };

  // Handle toggling access rule
  const handleToggleAccess = (rule: ContentAccessControl) => {
    updateRuleMutation.mutate({
      id: rule.id,
      isAccessible: !rule.isAccessible
    });
  };

  // Handle deleting access rule
  const handleDeleteRule = (id: number) => {
    if (confirm("Are you sure you want to delete this access rule?")) {
      deleteRuleMutation.mutate(id);
    }
  };

  // Handle selecting content for bulk actions
  const handleContentSelect = (content: Content) => {
    if (selectedContent.some(c => c.id === content.id)) {
      setSelectedContent(selectedContent.filter(c => c.id !== content.id));
    } else {
      setSelectedContent([...selectedContent, content]);
    }
  };

  // Toggle select all content
  const handleSelectAll = () => {
    if (selectedContent.length === filteredContentList.length) {
      setSelectedContent([]);
    } else {
      setSelectedContent([...filteredContentList]);
    }
  };

  // Determine content title based on content type
  const getContentTitle = (content: Content) => {
    if (content.title) return content.title;
    if (content.name) return content.name;
    return `ID: ${content.id}`;
  };

  // Determine content description based on content type
  const getContentDescription = (content: Content) => {
    if (!content.description) return '';
    return content.description.length > 100 
      ? content.description.substring(0, 100) + '...' 
      : content.description;
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <ShieldCheck className="h-5 w-5 text-primary" />
            Content Access Control
          </CardTitle>
          <CardDescription>
            Manage access control rules for different types of content based on user subscription levels
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="mb-4">
              <TabsTrigger value="rules">Access Rules</TabsTrigger>
              <TabsTrigger value="bulk">Bulk Actions</TabsTrigger>
            </TabsList>

            <TabsContent value="rules">
              <div className="mb-4 flex flex-col space-y-3 md:space-y-0 md:flex-row md:gap-4 justify-between">
                <div className="flex flex-col space-y-2 md:space-y-0 md:flex-row md:gap-2">
                  <div className="flex items-center gap-2">
                    <Select value={selectedContentType} onValueChange={setSelectedContentType}>
                      <SelectTrigger className="w-full md:w-[200px]">
                        <SelectValue placeholder="Content Type" />
                      </SelectTrigger>
                      <SelectContent>
                        {contentTypeOptions.map(option => (
                          <SelectItem key={option.value} value={option.value}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="flex items-center gap-2">
                    <Select value={selectedUserType} onValueChange={setSelectedUserType}>
                      <SelectTrigger className="w-full md:w-[200px]">
                        <SelectValue placeholder="User Type" />
                      </SelectTrigger>
                      <SelectContent>
                        {userTypeOptions.map(option => (
                          <SelectItem key={option.value} value={option.value}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>

                    <Button 
                      variant="outline" 
                      size="icon" 
                      onClick={() => refetchRules()}
                      className="h-10 w-10 flex-shrink-0"
                    >
                      <RefreshCw className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                <Dialog open={isCreateDialogOpen} onOpenChange={setCreateDialogOpen}>
                  <DialogTrigger asChild>
                    <Button className="flex items-center gap-2">
                      <Plus className="h-4 w-4" />
                      Add Access Rule
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Create New Access Rule</DialogTitle>
                      <DialogDescription>
                        Define who can access specific content based on user subscription level
                      </DialogDescription>
                    </DialogHeader>

                    <Form {...form}>
                      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                        <FormField
                          control={form.control}
                          name="contentType"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Content Type</FormLabel>
                              <Select
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select content type" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {contentTypeOptions.map(option => (
                                    <SelectItem key={option.value} value={option.value}>
                                      {option.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormDescription>
                                {field.value === "vocabulary_day" 
                                  ? "Vocabulary days have tiered access limits: Free users (10 words/day), Premium (30/day), Business (100/day)" 
                                  : "Type of content you want to control access to"}
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="contentId"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="flex items-center gap-1">
                                {form.watch("contentType") === "vocabulary_day" && (
                                  <BookOpen className="h-4 w-4 text-emerald-600" />
                                )}
                                {form.watch("contentType") === "vocabulary_day" ? "Vocabulary Day" : "Content ID"}
                              </FormLabel>
                              <FormControl>
                                {form.watch("contentType") === "vocabulary_day" ? (
                                  <Select
                                    onValueChange={(value) => field.onChange(parseInt(value))}
                                    value={field.value.toString()}
                                  >
                                    <SelectTrigger className="w-full">
                                      <SelectValue placeholder="Select vocabulary day" />
                                    </SelectTrigger>
                                    <SelectContent>
                                      {vocabularyDays.map((day) => (
                                        <SelectItem key={day} value={day.toString()}>
                                          Day {day}
                                        </SelectItem>
                                      ))}
                                    </SelectContent>
                                  </Select>
                                ) : (
                                  <Input type="number" {...field} />
                                )}
                              </FormControl>
                              <FormDescription>
                                {form.watch("contentType") === "vocabulary_day" 
                                  ? "Select which vocabulary day to control access to. Free users get 10 words/day, Premium 30/day, Business 100/day." 
                                  : "ID of the specific content (topic, practice set, etc.)"}
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="userType"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>User Type</FormLabel>
                              <Select
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select user type" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {userTypeOptions.map(option => (
                                    <SelectItem key={option.value} value={option.value}>
                                      {option.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormDescription>
                                What type of users should this rule apply to
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="isAccessible"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-center justify-between space-x-2 rounded-md border p-4">
                              <div className="space-y-0.5">
                                <FormLabel className="text-base">Allow Access</FormLabel>
                                <FormDescription>
                                  Enable or disable access for this user type
                                </FormDescription>
                              </div>
                              <FormControl>
                                <Switch
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                            </FormItem>
                          )}
                        />

                        {/* Daily Word Limit for vocabulary days */}
                        {form.watch("contentType") === "vocabulary_day" && form.watch("isAccessible") && (
                          <FormField
                            control={form.control}
                            name="dailyWordLimit"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel className="flex items-center gap-1">
                                  <BookOpenCheck className="h-4 w-4 text-emerald-600" />
                                  Daily Word Limit
                                </FormLabel>
                                <FormControl>
                                  <Input
                                    type="number"
                                    placeholder="Enter word limit"
                                    {...field}
                                    value={field.value === undefined ? '' : field.value}
                                    onChange={(e) => {
                                      const value = e.target.value === '' ? undefined : parseInt(e.target.value);
                                      field.onChange(value);
                                    }}
                                  />
                                </FormControl>
                                <FormDescription>
                                  {(() => {
                                    const userType = form.watch("userType");
                                    let recommendedLimit = 10;
                                    if (userType === "premium") recommendedLimit = 30;
                                    if (userType === "business") recommendedLimit = 100;
                                    if (userType === "admin") recommendedLimit = 0;
                                    
                                    return `Recommended limit for ${userType} users: ${
                                      userType === "admin" ? "unlimited (0)" : recommendedLimit
                                    } words per day. Enter 0 for unlimited.`;
                                  })()}
                                </FormDescription>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        )}

                        <DialogFooter>
                          <Button 
                            type="button" 
                            variant="outline" 
                            onClick={() => setCreateDialogOpen(false)}
                          >
                            Cancel
                          </Button>
                          <Button 
                            type="submit" 
                            disabled={createRuleMutation.isPending}
                          >
                            {createRuleMutation.isPending ? (
                              <>
                                <Spinner size="sm" className="mr-2" />
                                Creating...
                              </>
                            ) : (
                              "Create Rule"
                            )}
                          </Button>
                        </DialogFooter>
                      </form>
                    </Form>
                  </DialogContent>
                </Dialog>
              </div>

              {loadingRules ? (
                <div className="flex justify-center py-10">
                  <Spinner />
                </div>
              ) : (accessRules && accessRules.length > 0) ? (
                <>
                  <div className="mb-1 p-2 border rounded bg-muted/20 md:hidden flex items-center gap-2">
                    <Filter className="h-4 w-4 text-muted-foreground" />
                    <span className="text-xs text-muted-foreground">
                      Swipe horizontally to see all columns
                    </span>
                  </div>
                  <div className="overflow-x-auto">
                    <Table className="min-w-[800px]">
                      <TableHeader>
                        <TableRow>
                          <TableHead className="hidden md:table-cell w-[50px]">ID</TableHead>
                          <TableHead className="w-[120px]">Content ID</TableHead>
                          <TableHead className="hidden md:table-cell">Content Type</TableHead>
                          <TableHead className="w-[120px]">User Type</TableHead>
                          <TableHead className="w-[130px]">Access Status</TableHead>
                          {selectedContentType === 'vocabulary_day' && (
                            <TableHead className="hidden sm:table-cell w-[120px]">Word Limit</TableHead>
                          )}
                          <TableHead className="text-right w-[100px]">Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {accessRules.map((rule) => (
                          <TableRow key={rule.id}>
                            <TableCell className="hidden md:table-cell">{rule.id}</TableCell>
                            <TableCell>
                              {rule.contentType === 'vocabulary_day' ? (
                                <div className="flex items-center gap-1">
                                  <BookOpen className="h-4 w-4 text-emerald-600 flex-shrink-0" />
                                  <span>Day {rule.contentId}</span>
                                </div>
                              ) : rule.contentId}
                              <span className="text-xs text-muted-foreground md:hidden block mt-1">
                                {contentTypeOptions.find(opt => opt.value === rule.contentType)?.label || rule.contentType}
                              </span>
                            </TableCell>
                            <TableCell className="hidden md:table-cell">
                              <Badge variant="outline">
                                {contentTypeOptions.find(opt => opt.value === rule.contentType)?.label || rule.contentType}
                              </Badge>
                            </TableCell>
                            <TableCell>
                              <Badge variant={rule.userType === 'admin' ? 'destructive' : (rule.userType === 'premium' ? 'default' : 'secondary')}>
                                {rule.userType}
                              </Badge>
                            </TableCell>
                            <TableCell>
                              {rule.isAccessible ? (
                                <Badge className="bg-green-100 text-green-800 hover:bg-green-200">
                                  <CheckCircle className="h-3 w-3 mr-1 flex-shrink-0" /> Accessible
                                </Badge>
                              ) : (
                                <Badge variant="outline" className="bg-red-50 text-red-800 hover:bg-red-100">
                                  <LockIcon className="h-3 w-3 mr-1 flex-shrink-0" /> Restricted
                                </Badge>
                              )}
                              {selectedContentType === 'vocabulary_day' && rule.dailyWordLimit !== undefined && (
                                <div className="sm:hidden flex items-center gap-1 mt-1 text-xs text-muted-foreground">
                                  <BookOpenCheck className="h-3 w-3 text-emerald-600 flex-shrink-0" />
                                  <span>
                                    {rule.dailyWordLimit === 0 ? 'Unlimited' : `${rule.dailyWordLimit} words`}
                                  </span>
                                </div>
                              )}
                            </TableCell>
                            {selectedContentType === 'vocabulary_day' && (
                              <TableCell className="hidden sm:table-cell">
                                {rule.dailyWordLimit !== undefined ? (
                                  <div className="flex items-center gap-1">
                                    <BookOpenCheck className="h-4 w-4 text-emerald-600 flex-shrink-0" />
                                    <span className="font-medium">
                                      {rule.dailyWordLimit === 0 ? 'Unlimited' : `${rule.dailyWordLimit} words`}
                                    </span>
                                  </div>
                                ) : (
                                  <span className="text-slate-400 text-sm">Not set</span>
                                )}
                              </TableCell>
                            )}
                            <TableCell className="text-right">
                              <div className="flex justify-end gap-1">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleToggleAccess(rule)}
                                  title={rule.isAccessible ? "Restrict Access" : "Grant Access"}
                                  className="h-8 w-8 p-0"
                                >
                                  {rule.isAccessible ? (
                                    <LockIcon className="h-4 w-4 text-red-600" />
                                  ) : (
                                    <UnlockIcon className="h-4 w-4 text-green-600" />
                                  )}
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleDeleteRule(rule.id)}
                                  className="text-red-600 hover:text-red-800 hover:bg-red-50 h-8 w-8 p-0"
                                  title="Delete Rule"
                                >
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </div>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                </>
              ) : (
                <div className="text-center py-10 border rounded-lg bg-slate-50">
                  <ShieldOff className="h-10 w-10 text-slate-400 mx-auto mb-2" />
                  <p className="text-slate-500 mt-2">No access rules found for this combination.</p>
                  <p className="text-slate-400 text-sm mb-4">Try selecting a different content type or user type, or create a new rule.</p>
                  <Button
                    variant="outline"
                    onClick={() => setCreateDialogOpen(true)}
                    className="mx-auto"
                  >
                    <Plus className="h-4 w-4 mr-1" />
                    Create First Rule
                  </Button>
                </div>
              )}
            </TabsContent>

            <TabsContent value="bulk">
              <Alert className="mb-4">
                <AlertTitle>Bulk Access Management</AlertTitle>
                <AlertDescription>
                  Create access rules for multiple content items at once. Select the content type, user type, and content items you want to manage.
                  {selectedContentType === 'vocabulary_day' && (
                    <div className="mt-2 flex items-center gap-1 text-emerald-600">
                      <BookOpenCheck className="h-4 w-4" />
                      <span className="text-sm font-medium">
                        Vocabulary days have tiered access limits: Free users (10 words/day), Premium (30/day), Business (100/day)
                      </span>
                    </div>
                  )}
                </AlertDescription>
              </Alert>

              <div className="mb-4 space-y-4">
                <div className="flex flex-col md:flex-row gap-4">
                  <div className="flex-1">
                    <Select value={selectedContentType} onValueChange={setSelectedContentType}>
                      <SelectTrigger>
                        <SelectValue placeholder="Content Type" />
                      </SelectTrigger>
                      <SelectContent>
                        {contentTypeOptions.map(option => (
                          <SelectItem key={option.value} value={option.value}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="flex-1">
                    <Select value={selectedUserType} onValueChange={setSelectedUserType}>
                      <SelectTrigger>
                        <SelectValue placeholder="User Type" />
                      </SelectTrigger>
                      <SelectContent>
                        {userTypeOptions.map(option => (
                          <SelectItem key={option.value} value={option.value}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="flex justify-between items-center">
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" onClick={handleSelectAll}>
                      {selectedContent.length === filteredContentList.length ? "Deselect All" : "Select All"}
                    </Button>
                    <span className="text-sm text-slate-500">
                      {selectedContent.length} of {filteredContentList.length} selected
                    </span>
                  </div>
                  
                  <Dialog open={isBulkDialogOpen} onOpenChange={setBulkDialogOpen}>
                    <DialogTrigger asChild>
                      <Button 
                        disabled={selectedContent.length === 0}
                        className="flex items-center gap-2"
                      >
                        <Users className="h-4 w-4" />
                        Set Access for Selected
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>Bulk Access Control</DialogTitle>
                        <DialogDescription>
                          Set access permissions for {selectedContent.length} selected content items
                        </DialogDescription>
                      </DialogHeader>

                      <Form {...bulkForm}>
                        <form onSubmit={bulkForm.handleSubmit(onBulkSubmit)} className="space-y-6">
                          <div className="space-y-2">
                            <h3 className="font-medium">Selected Content Type:</h3>
                            <Badge className="text-sm">
                              {contentTypeOptions.find(opt => opt.value === selectedContentType)?.label}
                            </Badge>
                          </div>

                          <div className="space-y-2">
                            <h3 className="font-medium">Selected User Type:</h3>
                            <Badge className="text-sm">
                              {userTypeOptions.find(opt => opt.value === selectedUserType)?.label}
                            </Badge>
                          </div>

                          <Separator />

                          <div className="space-y-2">
                            <h3 className="font-medium">Selected {selectedContent.length} Content Items</h3>
                            <div className="max-h-40 overflow-y-auto border rounded p-2">
                              {selectedContent.map(content => (
                                <div key={content.id} className="text-sm py-1 border-b last:border-0 flex items-center gap-1">
                                  {selectedContentType === 'vocabulary_day' && (
                                    <BookOpen className="h-3 w-3 text-emerald-600 flex-shrink-0" />
                                  )}
                                  {selectedContentType === 'vocabulary_day' 
                                    ? `Day ${content.id}` 
                                    : getContentTitle(content)} 
                                  <span className="text-slate-500">
                                    {selectedContentType !== 'vocabulary_day' && `(ID: ${content.id})`}
                                  </span>
                                </div>
                              ))}
                            </div>
                          </div>

                          <FormField
                            control={bulkForm.control}
                            name="isAccessible"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between space-x-2 rounded-md border p-4">
                                <div className="space-y-0.5">
                                  <FormLabel className="text-base">Allow Access</FormLabel>
                                  <FormDescription>
                                    Should these users have access to the selected content?
                                  </FormDescription>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />

                          {/* Daily Word Limit for vocabulary days in bulk form */}
                          {selectedContentType === "vocabulary_day" && bulkForm.watch("isAccessible") && (
                            <FormField
                              control={bulkForm.control}
                              name="dailyWordLimit"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel className="flex items-center gap-1">
                                    <BookOpenCheck className="h-4 w-4 text-emerald-600" />
                                    Daily Word Limit
                                  </FormLabel>
                                  <FormControl>
                                    <Input
                                      type="number"
                                      placeholder="Enter word limit"
                                      {...field}
                                      value={field.value === undefined ? '' : field.value}
                                      onChange={(e) => {
                                        const value = e.target.value === '' ? undefined : parseInt(e.target.value);
                                        field.onChange(value);
                                      }}
                                    />
                                  </FormControl>
                                  <FormDescription>
                                    {(() => {
                                      const userType = selectedUserType;
                                      let recommendedLimit = 10;
                                      if (userType === "premium") recommendedLimit = 30;
                                      if (userType === "business") recommendedLimit = 100;
                                      if (userType === "admin") recommendedLimit = 0;
                                      
                                      return `Recommended limit for ${userType} users: ${
                                        userType === "admin" ? "unlimited (0)" : recommendedLimit
                                      } words per day. Enter 0 for unlimited.`;
                                    })()}
                                  </FormDescription>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          )}

                          <DialogFooter>
                            <Button 
                              type="button" 
                              variant="outline" 
                              onClick={() => setBulkDialogOpen(false)}
                            >
                              Cancel
                            </Button>
                            <Button 
                              type="submit" 
                              disabled={bulkCreateRulesMutation.isPending}
                            >
                              {bulkCreateRulesMutation.isPending ? (
                                <>
                                  <Spinner size="sm" className="mr-2" />
                                  Processing...
                                </>
                              ) : (
                                "Apply to Selected"
                              )}
                            </Button>
                          </DialogFooter>
                        </form>
                      </Form>
                    </DialogContent>
                  </Dialog>
                </div>
              </div>

              {loadingContent ? (
                <div className="flex justify-center py-10">
                  <Spinner />
                </div>
              ) : filteredContentList.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 mt-4">
                  {filteredContentList.map(content => (
                    <Card 
                      key={content.id}
                      className={`transition-all cursor-pointer ${
                        selectedContent.some(c => c.id === content.id) 
                          ? 'border-primary bg-primary/5' 
                          : 'hover:border-gray-300'
                      }`}
                      onClick={() => handleContentSelect(content)}
                    >
                      <CardContent className="p-3 sm:p-4 flex items-start gap-3">
                        <Checkbox 
                          checked={selectedContent.some(c => c.id === content.id)}
                          className="mt-1 flex-shrink-0"
                        />
                        <div className="flex-1 min-w-0">
                          <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start">
                            <div className="min-w-0 pr-2">
                              <h3 className="font-medium truncate flex items-center gap-1">
                                {selectedContentType === 'vocabulary_day' && (
                                  <BookOpen className="h-4 w-4 text-emerald-600 flex-shrink-0" />
                                )}
                                {selectedContentType === 'vocabulary_day' 
                                  ? `Vocabulary Day ${content.id}` 
                                  : getContentTitle(content)}
                              </h3>
                              <div className="flex flex-wrap gap-2 mt-1">
                                <Badge variant="outline" className="text-xs">
                                  {selectedContentType === 'vocabulary_day' ? `Day: ${content.id}` : `ID: ${content.id}`}
                                </Badge>
                                {content.category && (
                                  <Badge variant="outline" className="text-xs bg-slate-50">
                                    {content.category}
                                  </Badge>
                                )}
                                {content.type && (
                                  <Badge variant="outline" className="text-xs bg-slate-50">
                                    {content.type}
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </div>
                          <p className="text-sm text-slate-500 mt-2 line-clamp-2">
                            {getContentDescription(content)}
                          </p>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="text-center py-10 border rounded-lg bg-slate-50">
                  <Filter className="h-10 w-10 text-slate-400 mx-auto mb-2" />
                  <p className="text-slate-500 mt-2">No eligible content found.</p>
                  <p className="text-slate-400 text-sm">
                    {accessRules && accessRules.length > 0 
                      ? "All content already has access rules for this user type."
                      : "Try selecting a different content type or create content first."}
                  </p>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
};

export default ContentAccessManager;