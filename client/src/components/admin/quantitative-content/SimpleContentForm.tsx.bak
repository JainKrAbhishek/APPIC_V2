import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle, 
  CardDescription,
  CardFooter
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from '@/components/ui/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Spinner } from '@/components/ui/spinner';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { InfoIcon, Edit, Eye, Code } from 'lucide-react';
import { ScrollArea } from '@/components/ui/scroll-area';
import { QuantTopic, QuantContent } from '@shared/schema';
import { RichTextEditorIntegration, RichTextContent } from '@/lib/rich-text-editor';
import { 
  ContentFormProps, 
  ContentFormInput, 
  TopicFormInput,
  contentFormSchema,
  topicFormSchema
} from './types';

/**
 * Category options for quantitative topics
 */
const categoryOptions = [
  { value: 'arithmetic', label: 'Arithmetic' },
  { value: 'algebra', label: 'Algebra' },
  { value: 'geometry', label: 'Geometry' },
  { value: 'data_analysis', label: 'Data Analysis' },
  { value: 'word_problems', label: 'Word Problems' },
  { value: 'advanced_topics', label: 'Advanced Topics' },
];

/**
 * Simplified content form component
 * Handles both topic and content editing
 */
const SimpleContentForm: React.FC<ContentFormProps> = ({
  topic,
  content,
  topics,
  isCreatingTopic,
  isCreatingContent,
  loading,
  onSaveTopic,
  onSaveContent,
  onCancel
}) => {
  // Form for topics
  const topicForm = useForm<TopicFormInput>({
    resolver: zodResolver(topicFormSchema),
    defaultValues: topic ? {
      title: topic.name,
      description: topic.description,
      category: topic.category,
      groupNumber: topic.groupNumber,
      order: topic.order
    } : {
      title: '',
      description: '',
      category: 'arithmetic',
      groupNumber: 1,
      order: 0
    }
  });

  // State for managing edit/preview tabs and debug dialog
  const [activeTab, setActiveTab] = useState<string>("edit");
  const [showDebugInfo, setShowDebugInfo] = useState<boolean>(false);
  
  // Process the content for the rich text editor - enhanced with better format detection
  const prepareContentForEditor = (rawContent: any): string => {
    console.log("Preparing content for editor, raw content type:", typeof rawContent);
    
    // Handle HTML content or plain text from database
    const detectHtmlContent = (content: string): boolean => {
      // Basic check for HTML tags
      return /<\/?[a-z][\s\S]*>/i.test(content);
    };
    
    const convertPlainTextToSlate = (text: string): string => {
      // Split text by paragraphs and convert to Slate format
      const paragraphs = text.split(/\n\s*\n/); // Split on blank lines
      const slateNodes = paragraphs.map(p => {
        const lines = p.split(/\n/);
        if (lines.length === 1) {
          return {
            type: "paragraph",
            children: [{ text: p.trim() }]
          };
        } else {
          return {
            type: "paragraph",
            children: [{ text: lines.join('\n').trim() }]
          };
        }
      });
      return JSON.stringify(slateNodes);
    };
    
    // Add more comprehensive logging to track format issues
    if (rawContent === null || rawContent === undefined) {
      console.log("Content is null or undefined, creating default empty editor");
      return JSON.stringify([{
        type: "paragraph",
        children: [{ text: "" }]
      }]);
    }
    
    // If content is already a string, check if it's valid JSON or other content
    if (typeof rawContent === 'string') {
      console.log("Raw content is a string of length:", rawContent.length);
      
      // Empty string case
      if (!rawContent.trim()) {
        console.log("Content is empty string, creating default empty editor");
        return JSON.stringify([{
          type: "paragraph",
          children: [{ text: "" }]
        }]);
      }
      
      // Try parsing as JSON first
      try {
        const parsed = JSON.parse(rawContent);
        
        // Check if it's the right format (array with Slate elements)
        if (Array.isArray(parsed) && parsed.length > 0) {
          console.log("✅ Content is valid Slate array JSON string");
          return rawContent; // Return as is since it's valid
        } else if (typeof parsed === 'object' && parsed !== null && 
                  'type' in parsed && 'children' in parsed) {
          // Single Slate element, wrap in array
          console.log("Content is single Slate element, wrapping in array");
          return JSON.stringify([parsed]);
        } else {
          // Not in Slate format, convert to paragraph
          console.log("Content is valid JSON but not in Slate format, converting to paragraph");
          return JSON.stringify([{
            type: 'paragraph',
            children: [{ text: JSON.stringify(parsed) }]
          }]);
        }
      } catch (e) {
        // Not JSON, check if it's HTML content
        if (detectHtmlContent(rawContent)) {
          console.log("Content appears to be HTML, converting to text paragraph");
          return JSON.stringify([{
            type: "paragraph",
            children: [{ text: rawContent }]
          }]);
        } else {
          // Treat as plain text and convert to appropriate Slate format
          console.log("Content is plain text, converting to paragraphs");
          return convertPlainTextToSlate(rawContent);
        }
      }
    } 
    // If content is an object, check format and stringify accordingly
    else if (typeof rawContent === 'object' && rawContent !== null) {
      console.log("Raw content is an object:", Object.keys(rawContent).join(', '));
      
      // Check if it's an array of Slate elements
      if (Array.isArray(rawContent) && rawContent.length > 0) {
        try {
          // Verify array elements have required properties
          const isValidSlateArray = rawContent.every(
            node => node && typeof node === 'object' && 'type' in node && 'children' in node
          );
          
          if (isValidSlateArray) {
            console.log("✅ Content is valid Slate array object");
            return JSON.stringify(rawContent);
          } else {
            console.log("Content is array but not valid Slate format, converting elements");
            const converted = rawContent.map(node => {
              if (typeof node === 'string') {
                return {
                  type: "paragraph",
                  children: [{ text: node }]
                };
              } else if (node && typeof node === 'object') {
                // Try to preserve some structure
                return {
                  type: "paragraph",
                  children: [{ text: JSON.stringify(node) }]
                };
              } else {
                return {
                  type: "paragraph",
                  children: [{ text: String(node) }]
                };
              }
            });
            return JSON.stringify(converted);
          }
        } catch (e) {
          console.error("Error processing array content:", e);
          return JSON.stringify([{
            type: "paragraph",
            children: [{ text: JSON.stringify(rawContent) }]
          }]);
        }
      } 
      // Check if it's a single Slate element
      else if ('type' in rawContent && 'children' in rawContent) {
        console.log("✅ Content is single Slate element object, wrapping in array");
        return JSON.stringify([rawContent]);
      } 
      // Other object with content property that might contain the actual content
      else if ('content' in rawContent && typeof rawContent.content === 'string') {
        console.log("Found nested content property, recursively processing");
        return prepareContentForEditor(rawContent.content);
      }
      // Other object, convert to JSON string
      else {
        console.log("Content is unrecognized object format, stringifying as text");
        return JSON.stringify([{
          type: "paragraph",
          children: [{ text: JSON.stringify(rawContent) }]
        }]);
      }
    }
    
    // Default empty content
    console.log("No valid content format detected, creating default empty editor");
    return JSON.stringify([{
      type: "paragraph",
      children: [{ text: "" }]
    }]);
  };
  
  // Prepare initial content
  const initialContent = content ? prepareContentForEditor(content.content) : JSON.stringify([{
    type: "paragraph",
    children: [{ text: "" }]
  }]);
  
  // Debug logging
  console.log("Content from database:", content ? {
    id: content.id,
    title: content.title,
    contentType: typeof content.content,
    contentLength: typeof content.content === 'string' ? content.content.length : 'unknown',
    contentSample: typeof content.content === 'string' ? content.content.substring(0, 100) : JSON.stringify(content.content).substring(0, 100)
  } : 'No content');
  
  console.log("Initial content for editor:", initialContent.substring(0, 100) + "...");
  
  // Form for content
  const contentForm = useForm<ContentFormInput>({
    resolver: zodResolver(contentFormSchema),
    defaultValues: content ? {
      title: content.title,
      content: initialContent,
      order: content.order,
      topicId: content.topicId
    } : {
      title: '',
      content: '',
      order: 0,
      topicId: topic?.id || 0
    }
  });

  // Update form when props change
  React.useEffect(() => {
    // If editing existing content, ensure content is properly set
    if (!isCreatingContent && content) {
      // Prepare content for the editor
      const formattedContent = prepareContentForEditor(content.content);
      
      console.log("Editing existing content, setting form values:", {
        title: content.title,
        contentPreview: formattedContent.substring(0, 100) + "..."
      });
      
      // Force reset the content field with the formatted value
      contentForm.setValue('content', formattedContent, { 
        shouldValidate: true,
        shouldDirty: false,
        shouldTouch: false
      });
      
      // Set other fields
      contentForm.setValue('title', content.title);
      contentForm.setValue('order', content.order);
      contentForm.setValue('topicId', content.topicId);
    } 
    // If creating new content under a topic
    else if (topic && isCreatingContent) {
      contentForm.setValue('topicId', topic.id);
    }
  }, [topic, isCreatingContent, content, contentForm]);
  
  // Watch content value for preview
  const watchContent = contentForm.watch("content");
  const watchTitle = contentForm.watch("title");

  // Handle form submissions
  const handleTopicSubmit = (data: TopicFormInput) => {
    onSaveTopic(data);
  };

  const handleContentSubmit = (data: ContentFormInput) => {
    // Process content for submission
    // If the content is not a string (object from editor), stringify it
    let processedData = { ...data };
    
    if (typeof data.content === 'object') {
      console.log("Converting content object to string for submission");
      processedData.content = JSON.stringify(data.content);
    } else if (typeof data.content === 'string') {
      try {
        // Try to parse it to validate it's proper JSON
        JSON.parse(data.content);
        // It's already a valid JSON string, leave as is
        console.log("Content is valid JSON string, using as is");
      } catch (e) {
        // Not valid JSON, wrap it in the basic structure
        console.log("Content is not valid JSON, converting to proper format");
        processedData.content = JSON.stringify([{
          type: 'paragraph',
          children: [{ text: data.content }]
        }]);
      }
    }
    
    console.log("Submitting content:", processedData.content.substring(0, 100) + "...");
    onSaveContent(processedData);
  };

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>
          {isCreatingTopic ? 'Create Topic' : isCreatingContent ? 'Create Content' : 'Edit'}
        </CardTitle>
        <CardDescription>
          {isCreatingTopic 
            ? 'Create a new quantitative topic'
            : isCreatingContent
              ? 'Add new content to this topic'
              : 'Edit existing content'}
        </CardDescription>
      </CardHeader>
      <CardContent>
        {/* This conditional logic was causing the issue: */}
        {/* If editing content (not creating content) but there's a topic AND no content, show topic form */}
        {/* Otherwise, show content form */}
        {isCreatingTopic || (!isCreatingContent && topic && !content) ? (
          <Form {...topicForm}>
            <form onSubmit={topicForm.handleSubmit(handleTopicSubmit)} className="space-y-4">
              <FormField
                control={topicForm.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Topic Title</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter topic title" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={topicForm.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea placeholder="Enter topic description" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <FormField
                  control={topicForm.control}
                  name="category"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Category</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select category" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {categoryOptions.map(option => (
                            <SelectItem key={option.value} value={option.value}>
                              {option.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={topicForm.control}
                  name="groupNumber"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Group Number</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min={1}
                          placeholder="1" 
                          {...field}
                          onChange={e => field.onChange(parseInt(e.target.value) || 1)} 
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={topicForm.control}
                  name="order"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Display Order</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min={0}
                          placeholder="0"
                          {...field}
                          onChange={e => field.onChange(parseInt(e.target.value) || 0)} 
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="flex justify-end space-x-2 pt-4">
                <Button type="button" variant="outline" onClick={onCancel}>
                  Cancel
                </Button>
                <Button type="submit" disabled={loading}>
                  {loading && <Spinner size="sm" className="mr-2" />}
                  {isCreatingTopic ? 'Create Topic' : 'Update Topic'}
                </Button>
              </div>
            </form>
          </Form>
        ) : (
          <Form {...contentForm}>
            <form onSubmit={contentForm.handleSubmit(handleContentSubmit)} className="space-y-4">
              <FormField
                control={contentForm.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Content Title</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter content title" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {isCreatingContent && (
                <FormField
                  control={contentForm.control}
                  name="topicId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Topic</FormLabel>
                      <Select 
                        onValueChange={(value) => field.onChange(parseInt(value))} 
                        defaultValue={field.value?.toString()}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select topic" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {topics.map(topic => (
                            <SelectItem key={topic.id} value={topic.id.toString()}>
                              {topic.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
              
              <FormField
                control={contentForm.control}
                name="order"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Display Order</FormLabel>
                    <FormControl>
                      <Input 
                        type="number" 
                        min={0}
                        placeholder="0"
                        {...field}
                        onChange={e => field.onChange(parseInt(e.target.value) || 0)} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {/* Tabs for Edit/Preview */}
              <div className="pt-2">
                <Tabs defaultValue="edit" value={activeTab} onValueChange={setActiveTab}>
                  <div className="flex justify-between items-center mb-4">
                    <div className="flex items-center gap-2">
                      <FormLabel>Content</FormLabel>
                      {!isCreatingContent && content && (
                        <Button 
                          type="button" 
                          variant="outline" 
                          size="sm"
                          className="h-7 px-2 text-xs"
                          onClick={() => setShowDebugInfo(!showDebugInfo)}
                        >
                          <Code className="h-3 w-3 mr-1" />
                          {showDebugInfo ? 'Hide Format Info' : 'Debug Format'}
                        </Button>
                      )}
                    </div>
                    <TabsList>
                      <TabsTrigger value="edit" className="flex items-center gap-1">
                        <Edit className="h-4 w-4" />
                        Edit
                      </TabsTrigger>
                      <TabsTrigger value="preview" className="flex items-center gap-1">
                        <Eye className="h-4 w-4" />
                        Preview
                      </TabsTrigger>
                    </TabsList>
                  </div>
                  
                  {showDebugInfo && content && (
                    <Alert className="mb-4 bg-gray-100 dark:bg-gray-900 border-gray-300">
                      <AlertTitle className="text-sm font-mono">Content Format Debugging</AlertTitle>
                      <AlertDescription className="text-xs">
                        <div className="mt-2 space-y-2">
                          <div>
                            <span className="font-bold">Raw content type:</span> {typeof content.content}
                          </div>
                          {typeof content.content === 'string' && (
                            <div>
                              <span className="font-bold">Content length:</span> {content.content.length} chars
                            </div>
                          )}
                          <div>
                            <details>
                              <summary className="cursor-pointer font-bold">Raw content sample (first 150 chars)</summary>
                              <pre className="mt-1 p-2 bg-gray-200 dark:bg-gray-800 rounded text-xs overflow-x-auto">
                                {typeof content.content === 'string' 
                                  ? content.content.substring(0, 150) + '...'
                                  : JSON.stringify(content.content, null, 2).substring(0, 150) + '...'}
                              </pre>
                            </details>
                          </div>
                          <div>
                            <details>
                              <summary className="cursor-pointer font-bold">Prepared editor content (first 150 chars)</summary>
                              <pre className="mt-1 p-2 bg-gray-200 dark:bg-gray-800 rounded text-xs overflow-x-auto">
                                {initialContent.substring(0, 150)}...
                              </pre>
                            </details>
                          </div>
                        </div>
                      </AlertDescription>
                    </Alert>
                  )}
                  
                  <TabsContent value="edit" className="p-0 mt-0">
                    <FormField
                      control={contentForm.control}
                      name="content"
                      render={({ field }) => (
                        <FormItem>
                          <FormControl>
                            <div className="border rounded-md min-h-[400px]">
                              <RichTextEditorIntegration
                                value={typeof field.value === 'string' ? field.value : JSON.stringify(field.value)}
                                onChange={(newValue) => {
                                  console.log("Rich text editor changed, type:", typeof newValue, "preview:", newValue.substring(0, 50));
                                  field.onChange(newValue);
                                }}
                                placeholder="Enter content here..."
                                minHeight="400px"
                              />
                            </div>
                          </FormControl>
                          <FormDescription>
                            Use the rich text editor to format content with headings, lists, math formulas, and more.
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </TabsContent>
                  
                  <TabsContent value="preview" className="mt-0">
                    <Card>
                      <CardContent className="pt-6">
                        <h2 className="text-2xl font-bold mb-4">{watchTitle || "Untitled Content"}</h2>
                        
                        <ScrollArea className="h-[400px] rounded-md border p-4">
                          <div>
                            <RichTextContent
                              content={typeof watchContent === 'string' ? watchContent : JSON.stringify(watchContent)}
                              className="prose dark:prose-invert max-w-none"
                            />
                          </div>
                        </ScrollArea>
                        
                        <div className="mt-4 flex justify-end">
                          <Button
                            type="button"
                            variant="outline"
                            onClick={() => setActiveTab("edit")}
                            className="flex items-center gap-1"
                          >
                            <Edit className="h-4 w-4" />
                            Continue Editing
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                </Tabs>
              </div>
              
              <Alert className="bg-blue-50 dark:bg-blue-950/30">
                <InfoIcon className="h-4 w-4 text-blue-500" />
                <AlertDescription className="text-xs text-blue-700 dark:text-blue-300">
                  Switch to the Preview tab to see how your content will appear to students before publishing.
                </AlertDescription>
              </Alert>
              
              <div className="flex justify-end space-x-2 pt-4">
                <Button type="button" variant="outline" onClick={onCancel}>
                  Cancel
                </Button>
                <Button type="submit" disabled={loading}>
                  {loading && <Spinner size="sm" className="mr-2" />}
                  {isCreatingContent ? 'Create Content' : 'Update Content'}
                </Button>
              </div>
            </form>
          </Form>
        )}
      </CardContent>
    </Card>
  );
};

export default SimpleContentForm;